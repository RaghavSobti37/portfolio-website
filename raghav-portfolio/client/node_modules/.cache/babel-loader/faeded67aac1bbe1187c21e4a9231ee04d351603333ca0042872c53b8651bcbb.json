{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from 'react';\nimport exifr from 'exifr';\n\n// Helper functions to format EXIF data\nexport const formatAperture = aperture => {\n  if (!aperture) return null;\n  return `f/${aperture}`;\n};\nexport const formatShutterSpeed = shutterSpeed => {\n  if (!shutterSpeed) return null;\n  if (shutterSpeed >= 1) {\n    return `${shutterSpeed}s`;\n  } else {\n    return `1/${Math.round(1 / shutterSpeed)}s`;\n  }\n};\nexport const formatISO = iso => {\n  if (!iso) return null;\n  return `ISO ${iso}`;\n};\nexport const formatFocalLength = focalLength => {\n  if (!focalLength) return null;\n  return `${focalLength}mm`;\n};\nexport const formatDate = date => {\n  if (!date) return null;\n  try {\n    if (date instanceof Date) {\n      return date.toISOString().split('T')[0];\n    }\n    if (typeof date === 'string') {\n      const parsedDate = new Date(date);\n      if (!isNaN(parsedDate.getTime())) {\n        return parsedDate.toISOString().split('T')[0];\n      }\n    }\n    return null;\n  } catch (error) {\n    return null;\n  }\n};\n\n// Function to extract EXIF data from an image URL (client-side)\nexport const extractExifFromUrl = async imageUrl => {\n  try {\n    const exif = await exifr.parse(imageUrl, {\n      tiff: true,\n      exif: true,\n      gps: false,\n      interop: false,\n      ifd1: false\n    });\n    if (!exif) {\n      return null;\n    }\n    const metadata = {\n      camera: null,\n      lens: null,\n      settings: {\n        aperture: null,\n        shutter: null,\n        iso: null,\n        focalLength: null\n      },\n      date: null\n    };\n\n    // Extract camera info\n    if (exif.Make && exif.Model) {\n      metadata.camera = `${exif.Make} ${exif.Model}`;\n    } else if (exif.Model) {\n      metadata.camera = exif.Model;\n    }\n\n    // Extract lens info\n    if (exif.LensModel) {\n      metadata.lens = exif.LensModel;\n    } else if (exif.LensMake && exif.LensModel) {\n      metadata.lens = `${exif.LensMake} ${exif.LensModel}`;\n    }\n\n    // Extract camera settings\n    metadata.settings.aperture = formatAperture(exif.FNumber || exif.ApertureValue);\n    metadata.settings.shutter = formatShutterSpeed(exif.ExposureTime || exif.ShutterSpeedValue);\n    metadata.settings.iso = formatISO(exif.ISO || exif.ISOSpeedRatings);\n    metadata.settings.focalLength = formatFocalLength(exif.FocalLength);\n\n    // Extract date\n    metadata.date = formatDate(exif.DateTimeOriginal || exif.DateTime || exif.CreateDate);\n    return metadata;\n  } catch (error) {\n    console.warn(`Could not extract EXIF data from ${imageUrl}:`, error.message);\n    return null;\n  }\n};\n\n// Hook to dynamically load EXIF data for images\nexport const useExifData = imageUrl => {\n  _s();\n  const [metadata, setMetadata] = React.useState(null);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(null);\n  React.useEffect(() => {\n    if (!imageUrl) return;\n    setLoading(true);\n    setError(null);\n    extractExifFromUrl(imageUrl).then(data => {\n      setMetadata(data);\n      setLoading(false);\n    }).catch(err => {\n      setError(err);\n      setLoading(false);\n    });\n  }, [imageUrl]);\n  return {\n    metadata,\n    loading,\n    error\n  };\n};\n_s(useExifData, \"5JXiYJkoorIuWk0wwL4nzS4xPOk=\");","map":{"version":3,"names":["React","exifr","formatAperture","aperture","formatShutterSpeed","shutterSpeed","Math","round","formatISO","iso","formatFocalLength","focalLength","formatDate","date","Date","toISOString","split","parsedDate","isNaN","getTime","error","extractExifFromUrl","imageUrl","exif","parse","tiff","gps","interop","ifd1","metadata","camera","lens","settings","shutter","Make","Model","LensModel","LensMake","FNumber","ApertureValue","ExposureTime","ShutterSpeedValue","ISO","ISOSpeedRatings","FocalLength","DateTimeOriginal","DateTime","CreateDate","console","warn","message","useExifData","_s","setMetadata","useState","loading","setLoading","setError","useEffect","then","data","catch","err"],"sources":["C:/Users/Raghav Raj Sobti/Desktop/portfolio website code/raghav-portfolio/client/src/utils/exifUtils.js"],"sourcesContent":["import React from 'react';\r\nimport exifr from 'exifr';\r\n\r\n// Helper functions to format EXIF data\r\nexport const formatAperture = (aperture) => {\r\n  if (!aperture) return null;\r\n  return `f/${aperture}`;\r\n};\r\n\r\nexport const formatShutterSpeed = (shutterSpeed) => {\r\n  if (!shutterSpeed) return null;\r\n  if (shutterSpeed >= 1) {\r\n    return `${shutterSpeed}s`;\r\n  } else {\r\n    return `1/${Math.round(1/shutterSpeed)}s`;\r\n  }\r\n};\r\n\r\nexport const formatISO = (iso) => {\r\n  if (!iso) return null;\r\n  return `ISO ${iso}`;\r\n};\r\n\r\nexport const formatFocalLength = (focalLength) => {\r\n  if (!focalLength) return null;\r\n  return `${focalLength}mm`;\r\n};\r\n\r\nexport const formatDate = (date) => {\r\n  if (!date) return null;\r\n  try {\r\n    if (date instanceof Date) {\r\n      return date.toISOString().split('T')[0];\r\n    }\r\n    if (typeof date === 'string') {\r\n      const parsedDate = new Date(date);\r\n      if (!isNaN(parsedDate.getTime())) {\r\n        return parsedDate.toISOString().split('T')[0];\r\n      }\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\n// Function to extract EXIF data from an image URL (client-side)\r\nexport const extractExifFromUrl = async (imageUrl) => {\r\n  try {\r\n    const exif = await exifr.parse(imageUrl, {\r\n      tiff: true,\r\n      exif: true,\r\n      gps: false,\r\n      interop: false,\r\n      ifd1: false\r\n    });\r\n    \r\n    if (!exif) {\r\n      return null;\r\n    }\r\n\r\n    const metadata = {\r\n      camera: null,\r\n      lens: null,\r\n      settings: {\r\n        aperture: null,\r\n        shutter: null,\r\n        iso: null,\r\n        focalLength: null\r\n      },\r\n      date: null\r\n    };\r\n\r\n    // Extract camera info\r\n    if (exif.Make && exif.Model) {\r\n      metadata.camera = `${exif.Make} ${exif.Model}`;\r\n    } else if (exif.Model) {\r\n      metadata.camera = exif.Model;\r\n    }\r\n\r\n    // Extract lens info\r\n    if (exif.LensModel) {\r\n      metadata.lens = exif.LensModel;\r\n    } else if (exif.LensMake && exif.LensModel) {\r\n      metadata.lens = `${exif.LensMake} ${exif.LensModel}`;\r\n    }\r\n\r\n    // Extract camera settings\r\n    metadata.settings.aperture = formatAperture(exif.FNumber || exif.ApertureValue);\r\n    metadata.settings.shutter = formatShutterSpeed(exif.ExposureTime || exif.ShutterSpeedValue);\r\n    metadata.settings.iso = formatISO(exif.ISO || exif.ISOSpeedRatings);\r\n    metadata.settings.focalLength = formatFocalLength(exif.FocalLength);\r\n\r\n    // Extract date\r\n    metadata.date = formatDate(exif.DateTimeOriginal || exif.DateTime || exif.CreateDate);\r\n\r\n    return metadata;\r\n  } catch (error) {\r\n    console.warn(`Could not extract EXIF data from ${imageUrl}:`, error.message);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Hook to dynamically load EXIF data for images\r\nexport const useExifData = (imageUrl) => {\r\n  const [metadata, setMetadata] = React.useState(null);\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [error, setError] = React.useState(null);\r\n\r\n  React.useEffect(() => {\r\n    if (!imageUrl) return;\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    extractExifFromUrl(imageUrl)\r\n      .then((data) => {\r\n        setMetadata(data);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        setError(err);\r\n        setLoading(false);\r\n      });\r\n  }, [imageUrl]);\r\n\r\n  return { metadata, loading, error };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}